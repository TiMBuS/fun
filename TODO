Add objects.
W/R/T [P] calls: Look into all the deepcopy calls you make. There are far too many, and I'm sure a lot can be removed. <- RETHINK. Perhaps copy all simple types when they are altered, negating the need for deep list copies. Could end up being even slower though..

Maybe roll your own strftime
Make an interface to declare and call c functions <- just use parrots NCI and hope the jit can do it.

CONSIDER: All functions with a continuation-based predicate suck. It's inconsistant, it takes overhead that could be avoided using dup. I don't see why it needs to stay.
CONSIDER: A way to make list copies take less overhead. Lazy copies might work if data was actually immutable.

CONSIDER: (This is a big one!) Write a pre-processor to analyse the stack from the top down. Build a tree. Follow lists and execution paths (walk the code and use 'pop'-s to determine branches). Statically optimize code perhaps? Think of a way to memoize functions, and after all this is done, spit out optimized, real fun code. After this, run it using a non-lazy interpreter.
