# $Id$

#=begin overview

#This is the grammar for fun written as a sequence of Perl 6 rules.

#=end overview

grammar fun::Grammar is PCT::Grammar;

rule TOP {
	[<func>|<expr>]*
	[ $ || <panic: 'Syntax error'> ]
	{*}
}

##This ws rule will treat anything wrapped in '(*' and '*)' as a block comment.
##It will also treat a '#' as a single line comment.
token ws {
	<!ww>
	[
	| '(*' [ <-[(]> | '(' <!before '*'> | <.ws> ]*? '*)'
	| '#' \N* \n? 
	| \s+ 
	]*
}

##'ident' sucks I want hyphens dammit.
token funcname {
	[ \w | '-' | '?' | '=' <!before '='> ]+ {*}
}

token print {
	'.'	{*}
}

##These arent really expressions but whatever.
rule expr {
##Fundamental stuff
	| <list>	{*} #= list
	| <value>	{*} #= value
	| <print>	{*} #= print

##Built in functions
	| <builtins> {*} #= builtins

##Possibly a user function call (this is the 'last resort' match)
	|| <userfunccall>	{*} #= userfunccall
}

##The function is trechnically a list, but "<ident> == <list>" adds an extra (unnecessary) layer,
##because I'd have to dig <expr> out of the <list>
rule func {
	| [ '[' ~ ']' <expr>* ] <funcname> '==' {*}
	| <funcname> [ '[' ~ ']' <expr>* ] '==' {*}
}

rule list {
	'[' ~ ']' <expr>* {*} 
}

token value {
	| <float> 	{*} #= float
	| <integer>	{*} #= integer
	| <string> 	{*} #= string
	| <bool> 	{*} #= bool
	| <char> 	{*} #= char
}

token integer { '-'? \d+ {*} }
token float { '-'? \d* '.' \d+ {*} }
token bool { ['true' | 'false'] {*} }
token char { \' $<chr>=. <!before \'> {*} }
token string {
    [ \` <string_literal: '`' > \` | \" <string_literal: '"' > \" ]
    {*}
}

token builtins {
	[
	| ===BUILTINS===
	] <?before [ \s | '[' | ']' | '.' ]>
}

token userfunccall {
	<funcname> {*}
}